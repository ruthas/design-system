"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.reduce");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.entries");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractComponentDescription = exports.extractArgTypes = exports.extractArgTypesFromElements = void 0;

var _webComponents = require("@storybook/web-components");

/* eslint-disable import/no-extraneous-dependencies */
function mapData(data, category) {
  return data && data.reduce(function (acc, item) {
    var type = category === 'properties' ? {
      name: item.type
    } : {
      name: 'void'
    };
    acc[item.name] = {
      name: item.name,
      required: false,
      description: item.description,
      type: type,
      table: {
        category: category,
        type: {
          summary: item.type
        },
        defaultValue: {
          summary: item["default"] !== undefined ? item["default"] : item.defaultValue
        }
      }
    };
    return acc;
  }, {});
}

function isEmpty(obj) {
  return Object.entries(obj).length === 0 && obj.constructor === Object;
}

var extractArgTypesFromElements = function extractArgTypesFromElements(tagName, customElements) {
  if (!(0, _webComponents.isValidComponent)(tagName) || !(0, _webComponents.isValidMetaData)(customElements)) {
    return null;
  }

  var metaData = customElements.tags.find(function (tag) {
    return tag.name.toUpperCase() === tagName.toUpperCase();
  });
  var argTypes = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, mapData(metaData.attributes, 'attributes')), mapData(metaData.properties, 'properties')), mapData(metaData.events, 'events')), mapData(metaData.slots, 'slots')), mapData(metaData.cssProperties, 'css'));
  return argTypes;
};

exports.extractArgTypesFromElements = extractArgTypesFromElements;

var extractArgTypes = function extractArgTypes(tagName) {
  var customElements = (0, _webComponents.getCustomElements)();
  return extractArgTypesFromElements(tagName, customElements);
};

exports.extractArgTypes = extractArgTypes;

var extractComponentDescription = function extractComponentDescription(tagName) {
  var customElements = (0, _webComponents.getCustomElements)();

  if (!(0, _webComponents.isValidComponent)(tagName) || !(0, _webComponents.isValidMetaData)(customElements)) {
    return null;
  }

  var metaData = customElements.tags.find(function (tag) {
    return tag.name.toUpperCase() === tagName.toUpperCase();
  });
  return metaData && metaData.description;
};

exports.extractComponentDescription = extractComponentDescription;